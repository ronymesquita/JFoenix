buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}


plugins {
    id 'com.jfrog.bintray' version '1.7.3' apply false
    id 'com.github.ben-manes.versions' version '0.27.0' apply false
    id 'me.tatarka.retrolambda' version '3.7.1' apply false
    id 'com.github.hierynomus.license' version '0.15.0' apply false
    id 'net.nemerosa.versioning' version '2.8.2' apply false
    id 'org.sonarqube' version '2.8'
    id 'com.github.spotbugs' version '2.0.0' apply false
    id 'biz.aQute.bnd' version '4.2.0' apply false
    id 'org.openjfx.javafxplugin' version '0.0.8' apply false
    id 'maven-publish'
}

ext.moduleName = 'com.jfoenix'

subprojects {
    afterEvaluate {
        apply plugin: 'application'
        apply plugin: 'com.github.ben-manes.versions'
        apply plugin: 'net.nemerosa.versioning'

        // end::autoModuleName[]
        repositories {
            jcenter()
            mavenCentral()
            maven { url 'http://sevntu-checkstyle.github.com/sevntu.checkstyle/maven2' }
        }

        sourceCompatibility = 11
        targetCompatibility = 11

        tasks.withType(JavaCompile) {
            options.incremental = true
        }

        // tag::autoModuleName[]
        jar {
            inputs.property("moduleName", moduleName)
            manifest {
                attributes('Automatic-Module-Name': moduleName)
            }
        }

        if (JavaVersion.current().isJava8Compatible()) {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }

        apply from: rootProject.file('gradle/code-coverage.gradle')
        apply from: rootProject.file('gradle/checkstyle.gradle')
        apply from: rootProject.file('gradle/spotbugs.gradle')
//        apply from: rootProject.file('gradle/javafx.gradle')


        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'junit',
                    '--add-reads', "$moduleName=junit",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'ALL-MODULE-PATH',
                    '--add-reads', "$moduleName=junit",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
    }
}
